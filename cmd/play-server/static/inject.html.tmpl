<style>
#playg {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 400px;
  height: 18px;
  padding: 0 1rem 0 0.5rem;
  background-color: white;
  color: #000;
  font-size: .75rem;
  white-space: nowrap;
  z-index: 11000;
}
/* Override: panel-header & Remove "Dev Preview Text" */
.playgHelp.playgShow > .panel-header.playg-header { border-radius: 0; }
.root-container.ng-scope > .row.ng-scope > .red-1.nowrap { display: none; }
/* Override: panel-header & Remove "Dev Preview Text" */

#playg button.playgTourToggle,
#playg button.playgHelpToggle {
  display: none;
  height: 1rem;
  min-width: 4rem;
  margin: 1px 0 1px 0.7rem;
  background-color: #4287D6;
  padding: 0 4px;
  line-height: 1rem;
  font-size: 12px;
}

#playg button.playgTourToggle.playgShow,
#playg button.playgHelpToggle.playgShow {
  display: inline-block;
}

#playg .playgHelp {
  display: none;
  position: absolute;
  top: 18px;
  left: 0;
  min-width: 25rem;
  max-width: 50vw;
  max-height: 90vh;
  border: 1px solid #aaa;
  background-color: white;
  padding: 0 0;
  overflow: hidden;
}
#playg .playgHelp.playgShow {
  display: block;
}

#playg .playgHelpMain {
  height: 100%;
  padding: 1rem 1rem;
  overflow: scroll;
}
#playg .playgHelpMain .playgHelpCard h3 {
  margin-bottom: 0.5rem;
}
#playg .playgHelpMain .playgHelpCard h3 a,
#playg .playgHelpMain .playgHelpCard h4 a {
  margin-left: 6px;
  font-size: 8pt;
}
#playg .playgHelpMain .playgHelpCard h4 {
  margin-left: 4px;
  font-size: 10pt;
}
#playg .playgHelpMain .playgHelpCard pre {
  margin-left: 8px;
  font-size: 8pt;
}

form .playgHelp {
  margin-left: 0.7rem;
  line-height: 2rem;
}

body.modal-open .panel.dialog .panel-footer .playgHelp {
  flex-grow: 100;
  margin-left: 0.5rem;
}

.playgTour {
  display: none;
  flex-basis: 20rem;
  min-height: 532px;
  max-height: 100%;
  margin-left: 0;
  margin-right: 1rem;
  border-right: 1px solid #ececec;
  background-color: #fefefe;
  padding: 0.5rem 1rem 5rem 0.75rem;
  z-index: 1;
}
.playgTour.playgShow {
  display: block;
}

.playgTour .playgTourHeader {
  display: flex;
  flex-wrap: nowrap;
  justify-content: space-between;
}
.playgTour .playgTourHeader .modal-close,
.playgTour .playgTourContent .modal-close {
  display: inline-block;
  position: relative;
  top: 0;
  left: 0;
  padding: 0.05rem 0.5rem;
  background-color: #4287D6;
  font-size: .9rem;
}

.playgTour .playgTourContent h3,
.playgTour .playgTourContent h4 {
  margin: 0.5rem 0;
}

.playgTour .playgTourContent em {
  color: #EA2328;
}

.playgTour .playgTourContent a:hover {
  color: #3277d6;
  text-decoration: underline;
}

.playgTour .playgTourContent textarea {
  margin: 4px 0 4px 0;
  overflow: scroll;
  height: 9rem;
  border: 1px solid rgba(0, 0, 0,0.08);
  background-color: #F6F7F9;
  white-space: pre;
  font-family: monospace;
  font-size: 0.7rem;
  color: #000;
}

.playgTour .playgTourContent iframe {
  margin: 4px 0 4px 0;
  height: 5rem;
  padding: 4px;
  border: 1px solid rgba(0, 0, 0, 0.08);
  background-color: #F6F7F9;
  color: #000;
}

.playgTour .playgTourContent code.playg-inline {
  margin: 0;
  padding: 2px;
  border: 1px solid rgba(0, 0, 0, 0.04);
  background-color: #EBEFF2;
  border-radius: 4px;
  font-size: 12px;
  color: #318495;
}
.playgTour .playgTourContent code.playg-multiline {
  width: 100%;
  margin: 8px 0 8px 0;
  padding: 4px;
  border: 1px solid rgba(0, 0, 0,0.08);
  background-color: #F6F7F9;
  border-radius: 4px;
  font-size: 12px;
}
.playgTour .playgTourContent code.playg-multiline pre {
  font-size: inherit;
  background-color: inherit;
}

.playgTour .playgTourContent input[type="submit"] {
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
  border: none;
  border-radius: 2px;
  box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.2);
  background-color: #4287D6;
  padding: 0 0.5rem;
  white-space: nowrap;
  line-height: 1.25rem;
  font-size: 1rem;
  color: #fff;
  cursor: pointer;
}

.playgTour .playgTourContent .playgTourControls {
  margin: 1.75rem 0;
  font-size: 1rem;
}
.playgTour .playgTourContent .playgTourControls button {
  min-width: 3rem;
  height: 2rem;
  background-color: #4287D6;
  padding: 0 0.5rem;
  line-height: 2rem;
  font-size: 1rem;
  color: #fff;
}
.playgTour .playgTourContent .playgTourControls button:disabled {
  background-color: #d4d4d4;
  color: #f4f4f4;
}
.playgTour .playgTourContent .playgTourControls label.playgTourChooser {
  display: inline-block;
  position: relative;
  line-height: 1rem;
  font-size: 1rem;
  color: #777;
  cursor: pointer;
}
.playgTour .playgTourContent .playgTourControls label.playgTourChooser {
  margin-top: 8px;
}
.playgTour .playgTourContent .playgTourControls div.playgTourChooser {
  display: none;
}
.playgTour .playgTourContent .playgTourControls input#playgTourChooser:checked ~ div.playgTourChooser {
  display: block;
  position: absolute;
  bottom: 30px;
  left: 2px;
  margin-top: 16px;
  margin-bottom: 5px;
  border-right: 1px solid #ececec;
  border-left: 1px solid #ececec;
  background: #fefefe;
  padding: 0;
  overflow: scroll-y;
}
.playgTour .playgTourContent .playgTourControls .playgTourChooser a {
  display: block;
  cursor: pointer;
  margin: 2px 0px 2px 6px;
  padding-right: 6px;
  white-space: nowrap;
  line-height: 1.625em;
  font-size: 1rem;
  text-decoration: none;
  border-right: 4px solid #FFF;
  transition: all .3s;
}
.playgTour .playgTourContent .playgTourControls .playgTourChooser a.playgTourChooserCur {
  border-right: 4px solid #669ee0;
  color: #333;
}
.playgTour .playgTourContent .playgTourControls .playgTourChooser a:hover {
  border-right: 4px solid #c6dbf2;
  color: #333;
}

.playgAppSessionNeed {
  display: none;
}
.playgAppSessionHave .playgAppSessionNeed {
  display: block;
}

.playBoxNarrowOnly {
  display: none;
}

@media (max-width: 1020px) {
  .playBoxNarrowOnly {
    display: block;
  }
}
</style>

<script type="text/javascript">
var playgApp = {
  host: '{{.Host}}',
  port: '{{.PortApp}}',
  session: '{{.SessionId}}',
  user: '',
  pswd: '',
  id: {{.ContainerId}},
  ip: '{{.ContainerIP}}'
};

var playgHelpData = {{.injectData}};

(function () {
  var checkPlayLoginN = 0;

  function checkPlayLogin() {
    checkPlayLoginN += 1;
    if (checkPlayLoginN > 4000) {
      return;
    }

    var params = new URLSearchParams(document.location.search.substring(1));

    var lu = params.get("lu");
    var lp = params.get("lp");

    if (lu != "" && lp != "") {
      playgApp.user = playgApp.user || lu;
      playgApp.pswd = playgApp.pswd || lp;

      var eu = document.getElementById("auth-username-input");
      var ep = document.getElementById("auth-password-input");
      if (eu && ep) {
        var pl = document.getElementById("playgLoading");
        if (pl) {
          pl.style.display = "none";
        }

        if (eu.value == "" && ep.value == "") {
          eu.value = lu;
          ep.value = lp;

          // Poke angularJS event handlers.
          eu.dispatchEvent(new InputEvent("input"));
          ep.dispatchEvent(new InputEvent("input"));

          if (window.self !== window.top) { // When in iframe.
            var trys = 0;

            setTimeout(signIn, 200);

            function signIn() {
              if (trys < 400) {
                trys += 1;

                var signIn = document.querySelector(
                  '.sign-in-background + .flex-center form .panel-footer button[type=submit]');
                if (signIn && signIn.click) {
                  signIn.click();

                  return;
                }

                setTimeout(signIn, 200);
              }
            }
          }
        }

        return;
      }

      setTimeout(checkPlayLogin, 200);
    }
  }

  // -------------------------------------------

  // Creates the top-left, high z-index div for the Couchbase Playground,
  // or, the "playg", which has hidden-by-default toggle buttons and
  // is also the parent for the API Help popup (playgHelp).
  function createPlayG() {
    if (!document.body) { return; }

    var el = document.createElement("div");

    el.id = el.className = "playg";

    if (window.self !== window.top) { // When in iframe.
      el.style.top = "auto";
      el.style.bottom = "0";
      el.style.zIndex = 0;
    }

    el.innerHTML =
      {{if .SessionId}}
        '<a href="http://{{.Host}}:{{.PortApp}}/?s={{.SessionId}}" target="_blank">' +
          'Couchbase Playground <span id="playgLoading">loading...</span></a>'
      {{else}}
        'Couchbase Playground <span id="playgLoading">loading...</span>'
      {{end}}
      + `<button id="playgTourToggle" class="playgTourToggle"
                 onclick="playgTourToggle()">
           Guided Tour
         </button>
         <button id="playgHelpToggle" class="playgHelpToggle"
                 onclick="playgHelpToggle()">
           API Help
         </button>
         <div id="playgHelp" class="playgHelp">
           <a class="ui-dialog-titlebar-close modal-close"
              onclick="playgHelpToggle()">X</a>
           <div class="panel-header playg-header">
             <h2>API Help</h2>
           </div>
           <div id="playgHelpMain" class="playgHelpMain"/>
         </div>`;

    document.body.appendChild(el);

    setTimeout(checkPlayLogin, 200);

    setTimeout(checkContext, 2500);
  }

  // -------------------------------------------

  var checkPlayGN = 0;

  function checkPlayG() {
    checkPlayGN += 1;
    if (checkPlayGN > 1000) {
      return;
    }

    var el = document.getElementById("playg");
    if (!el) {
      createPlayG();
    }

    setTimeout(checkPlayG, 500); // Repeatedly try creating the playg.
  }

  checkPlayG();

  // -------------------------------------------

  function checkContext() {
    var signIn = document.querySelector(".sign-in-background");
    if (signIn) {
      var pl = document.getElementById("playgLoading");
      if (pl) {
        pl.style.display = "none";
      }
    }

    if (signIn ||
        !document.querySelector("body .root-container main")) {
      (document.getElementById("playgTourToggle") || {}).className = "playgTourToggle";

      helpHide();

      setTimeout(checkContext, 1000);

      return;
    }

    var pl = document.getElementById("playgLoading");
    if (pl) {
      pl.style.display = "none";
    }

    if (window.self !== window.top) {
      return; // In iframe.
    }

    var gt = document.getElementById("playgTourToggle");
    if (gt) {
      gt.className = "playgTourToggle playgShow";
    }

    if (playgTourLocationLoaded < 3 &&
        window.location.search.indexOf("playgTour=") > 0) {
      playgTourLocationLoaded += 1;

      playgTourToggle(true);
    }

    // -------------------------------------------

    // Ex: #/overview/stats?scenarioBucket=beer-sample
    var hashParts = window.location.hash.slice(2).split(/[\?\&]/);

    var keys = [];
    for (let p of hashParts) {
      keys.push(p.split('=')[0]);
    }

    var pbam = document.getElementById("playgHelpMain");
    if (!pbam) {
      setTimeout(checkContext, 1000);

      return;
    }

    for (let path of (playgHelpData[keys[0]] || [])) {
      for (let title of (path.titles || [])) {
        var a = [];

        var matches = document.querySelectorAll(title.querySelectorAll);

        for (let x of matches) {
          if (title.check) {
            var ctx = {
              path: path, title: title, x: x, o: null,
              q: function(s) { return document.querySelector(s) || {}; }
            };

            with (ctx) eval('o = ' + title.check);

            if (!ctx.o) {
              continue;
            }
          }

          if (title.replace) {
            x.innerHTML = title.replace;
          }

          var selectedService = [];

          for (let item of (title.items || [])) {
            var ctx = {
              path: path, title: title, x: x, o: '',
              q: function(s) { return document.querySelector(s) || {}; },
              addSelectedService: (s) => { selectedService.push(s); return ''; },
              strSelectedService: () => { return selectedService.join(','); },
              item: item,
              HOST: "cluster_url", USER: "Administrator", PSWD: "password"
            }

            if (item.tmpl) {
              with (ctx) eval('o = `' + item.tmpl + '`');
            }

            var o = stripEmptyLines(ctx.o || '').replace(/ \\$/, '');

            a.push(`<div>
                      <h4>
                       ${item.item}:
                       ${item.docs ? '<a href="' + item.docs + '" target="_blank">documentation</a>' : ''}
                      </h4>
                      ${item.extra || ''}
                      <pre>${o}</pre>
                    </div>`);
          }
        }

        if (a.length > 0) {
          var h =
            `<div class="playgHelpCard">
               <h3>
                 ${title.title}
                 ${title.docs ? '<a href="' + title.docs + '" target="_blank">documentation</a>' : ''}
               </h3>
               ${title.extra || ''}
               ${a.join('')}
             </div>`;

          h = stripEmptyLines(h);

          if (pbam.innerHTML != h) { // For copy/paste stability.
            pbam.innerHTML = h;
          }

          document.getElementById("playgHelpToggle").className = "playgHelpToggle playgShow";

	  var c = document.querySelector('body.modal-open .panel.dialog .panel-footer a[ng-click="$dismiss()"]');
	  if (c && c.innerText.trim() == "Cancel" && !c.previousElementSibling) {
            c.parentNode.insertBefore(helpLink(), c);
          }

          if (title.helpLinkAsLastSibling) {
            var c = document.querySelector(title.helpLinkAsLastSibling);
            if (c && c.parentNode.lastChild.className != "playgHelp") {
              c.parentNode.appendChild(helpLink());
            }
          }

          setTimeout(checkContext, 1000);

          return;
        }
      }
    }

    pbam.innerHTML =
      `<div class="playgHelpCard">
        No API Help available for this feature
       </div>`;

    helpHide();

    setTimeout(checkContext, 1000);
  }

  // -------------------------------------------

  function helpHide() {
    (document.getElementById("playgHelpToggle") || {}).className = "playgHelpToggle";

    (document.getElementById("playgHelp") || {}).className = "playgHelp";
  }

  // -------------------------------------------

  function helpLink() {
    var h = document.createElement("span");

    h.className = "playgHelp";
    h.innerHTML =
      `<a onclick="playgHelpToggle()">
         API Help <span class="icon fa-question-circle-o"/>
       </a>`;

    return h;
  }

  // -------------------------------------------

  function stripEmptyLines(s) {
    var lines = [];

    for (var line of s.split('\n')) {
      line = line.trimRight();
      if (line.length > 0) {
        lines.push(line);
      }
    }

    return lines.join('\n');
  }
})()

// -------------------------------------------

function playgHelpToggle() {
  var el = document.getElementById("playgHelp");
  if (el.className == "playgHelp") {
    el.className = "playgHelp playgShow";
  } else {
    el.className = "playgHelp";
  }
}

// -------------------------------------------

var playgTourLocationLoaded = 0;

function playgTourToggle(forceShow) {
  var gt = playgTourCreate();
  if (gt) {
    if (gt.className == "playgTour" || forceShow) {
      gt.className = "playgTour playgShow";
    } else {
      gt.remove();
    }
  }
}

// -------------------------------------------

function playgTourCreate() {
  var gt = document.getElementById("playgTour");
  if (!gt) {
    var params = new URLSearchParams(document.location.search.substring(1));

    if (!playgApp.session) {
      playgApp.session = params.get("lu") + params.get("lp");
    }

    gt = document.createElement("div");

    gt.id = gt.className = "playgTour";

    gt.addEventListener('click', function(ev) {
      if (ev.target.className.indexOf("playgTourChooser") < 0) {
        var ie = gt.querySelector('input[type="checkbox"]#playgTourChooser');
        if (ie) {
          ie.checked = false;
        }
      }
    });

    gt.innerHTML =
      `<div class="${playgApp.session ? 'playgAppSessionHave' : ''}">
         <div class="playgTourHeader">
           Guided Tour
           <a class="modal-close"
              onclick="playgTourToggle()">X</a>
         </div>
         <div id="playgTourContent" class="playgTourContent">
         </div>
       </div>`;

    var m = document.querySelector("main");
    if (!m) { return; }

    m.insertBefore(gt, m.firstChild);

    var tour = playgTourLast;
    if (!tour && params && params.get("playgTour")) {
      tour = params.get("playgTour").split(',');
    }
    if (!tour) {
      tour = [];
    }

    playgTourLoad(tour[0] || "welcome", tour[1] || 0);
  }

  return gt;
}

// -------------------------------------------

var playgTours;

var playgTourLast;

function playgTourLoad(name, part) {
  if (!playgTours) {
    playgTours = JSON.parse(document.getElementById("playgTours").innerText);
  }

  var t = playgTours[name];
  var p = t.parts[part];

  var controls = '';

  if (t.parts.length > 1) {
    chooser = [`<div class="playgTourChooser">`];

    for (var i = 0; i < t.parts.length; i++) {
      chooser.push(`<a onclick="playgTourLoad('${name}', ${i})"
                       class="${i == part ? 'playgTourChooserCur' : ''}">
                      ${i + 1} - ${t.parts[i].title}</a>`);
    }

    var i = 0;
    for (var k in playgTours) {
      i += 1;
      if (i > 2) {
        chooser.push(`<br/><a onclick="playgTourLoad('index', 0)">More Guided Tours...</a>`);
        break;
      }
    }

    chooser.push(`</div>`);

    controls =
      `<div class="playgTourControls">
         <button onclick="playgTourLoad('${name}', ${part - 1})"
                 ${part <= 0 ? 'disabled' : ''}>
           Previous</button>
         <label class="playgTourChooser" for="playgTourChooser">
           <input type="checkbox" name="playgTourChooser" id="playgTourChooser" class="playgTourChooser"/>
           ${chooser.join('')}
           &nbsp;&nbsp;${part + 1} of ${t.parts.length}&nbsp;&#x25BC;&nbsp;&nbsp;
         </label>
         <button onclick="playgTourLoad('${name}', ${part + 1})"
                 ${part >= t.parts.length - 1 ? 'disabled' : ''}>
           Next</button>
       </div>`;
  }

  var a = [`<h3>${t.title}</h3>`];

  a.push(`<h4>${p.title}</h4>`);
  a.push(p.content);
  a.push(controls);

  document.getElementById("playgTourContent").innerHTML = a.join('');

  for (let a of document.querySelectorAll('.playgTourContent a[data-playg="app"]')) {
    // Ex: '/foo/bar' turns into 'foo/bar'.
    var href = (a.href || '').replace(/^\//, '');

    a.href = `http://${playgApp.host}:${playgApp.port}/${href}?s=${playgApp.session}`;
  }

  for (let f of document.querySelectorAll('.playgTourContent form[data-playg="app"]')) {
    var url = new URL(f.action);

    f.action = `http://${playgApp.host}:${playgApp.port}${url.pathname}`;

    f.querySelector('input[name="s"]').value = playgApp.session;

    var t = f.querySelector('textarea[name="code"]');

    t.value = t.value
      .replace('CB_USER', playgApp.user)
      .replace('CB_PSWD', playgApp.pswd);
  }

  playgTourLast = [name, part];

  document.body.scrollTo(0, 0);
}
</script>

<script id="playgTours" type="application/json">
{{.tours}}
</script>

<style id="playgStyles"></style>

<script>
window.addEventListener("message",
  function(e) { playgHandleMessage(e, 0) }, false);

function playgHandleMessage(e, tries) {
  playgChecksEvent = null;

  if (e.data.clicks && e.data.clicks.length > 0 && tries < 10) {
    var el = document.querySelector(e.data.clicks[0]);
    if (el && el.click) {
      el.click();

      document.body.scrollTop = 0;

      e.data.clicks = e.data.clicks.slice(1);

      setTimeout(function() { playgHandleMessage(e, 0) }, 500);

      return;
    }

    setTimeout(function() { playgHandleMessage(e, tries + 1) }, 500);

    return;
  }

  document.getElementById("playgStyles").innerHTML = e.data.styles || '';

  playgChecksEvent = e;
}

var playgChecksEvent = null; // A MessageEvent or null.

function playgChecks() {
  var e = playgChecksEvent;
  if (e && e.data && e.source && document && document.querySelector) {
    var checked = [];

    for (let check of (e.data['checks'] || [])) {
      var ctx = { o: null,
                  q: function(s) { return document.querySelector(s) || {}; } };

      with (ctx) eval('o = ' + check);

      if (ctx.o) {
        checked.push(ctx.o);
      }
    }

    e.source.postMessage({ checked: checked, panel: e.data.panel }, e.origin);
  }
}

setInterval(playgChecks, 1000);
</script>
